// Generated by CoffeeScript 1.9.2
(function() {
  var FeatureVideoView;

  FeatureVideoView = (function() {
    function FeatureVideoView(videoElement) {
      var fragmentShader, gl, onResize, vertexShader;
      this.videoElement = videoElement;
      this.element = document.createElement('canvas');
      gl = this.gl = this.element.getContext('webgl');
      if (!gl) {
        return;
      }
      vertexShader = "attribute vec2 aVertexCoord;\nattribute vec2 aTextureCoord;\nvarying vec2 vTextureCoord;\nvoid main(void) {\n  gl_Position = vec4(aVertexCoord, 0.0, 1.0);\n  vTextureCoord = aTextureCoord;\n}";
      fragmentShader = "precision mediump float;\nuniform sampler2D uTexture;\nvarying highp vec2 vTextureCoord;\nvoid main(void) {\n  gl_FragColor = texture2D(uTexture, vTextureCoord);\n}";
      this.setupShader(vertexShader, fragmentShader);
      gl.clearColor(0, 0, 0, 1);
      this.videoRectBuffer = gl.createBuffer();
      this.videoTexture = this.createTexture(this.videoElement);
      onResize = (function(_this) {
        return function() {
          return _this.resize(window.innerWidth, _this.videoElement.videoHeight);
        };
      })(this);
      window.addEventListener('resize', onResize);
      onResize();
    }

    FeatureVideoView.prototype.createTexture = function(elem) {
      var gl, texture;
      gl = this.gl;
      texture = gl.createTexture();
      gl.bindTexture(gl.TEXTURE_2D, texture);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
      return texture;
    };

    FeatureVideoView.prototype.updateTexture = function(texture, elem) {
      var gl;
      gl = this.gl;
      gl.bindTexture(gl.TEXTURE_2D, texture);
      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
      return gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, elem);
    };

    FeatureVideoView.prototype.resize = function(width, height) {
      var gl, ref, videoHeight, videoRectData, videoWidth, widthRatio;
      this.width = width;
      this.height = height;
      gl = this.gl;
      this.element.width = this.width;
      this.element.height = this.height;
      gl.viewport(0, 0, this.width, this.height);
      ref = this.videoElement, videoWidth = ref.videoWidth, videoHeight = ref.videoHeight;
      widthRatio = videoWidth / this.width;
      videoRectData = [widthRatio, -1, 1, 0, widthRatio, 1, 1, 1, -widthRatio, -1, 0, 0, -widthRatio, 1, 0, 1];
      gl.bindBuffer(gl.ARRAY_BUFFER, this.videoRectBuffer);
      return gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(videoRectData), gl.STATIC_DRAW);
    };

    FeatureVideoView.prototype.compileShader = function(script, type) {
      var gl, shader;
      gl = this.gl;
      shader = gl.createShader(type);
      gl.shaderSource(shader, script);
      gl.compileShader(shader);
      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        console.warn(gl.getShaderInfoLog(shader));
      }
      return shader;
    };

    FeatureVideoView.prototype.setupShader = function(vertexShader, fragmentShader) {
      var gl, program;
      gl = this.gl;
      program = gl.createProgram();
      gl.attachShader(program, this.compileShader(vertexShader, gl.VERTEX_SHADER));
      gl.attachShader(program, this.compileShader(fragmentShader, gl.FRAGMENT_SHADER));
      gl.linkProgram(program);
      gl.useProgram(program);
      this.uTexture = gl.getUniformLocation(program, "uTexture");
      this.aVertexCoord = gl.getAttribLocation(program, "aVertexCoord");
      this.aTextureCoord = gl.getAttribLocation(program, "aTextureCoord");
      gl.enableVertexAttribArray(this.aVertexCoord);
      return gl.enableVertexAttribArray(this.aTextureCoord);
    };

    FeatureVideoView.prototype.render = function() {
      var gl;
      gl = this.gl;
      this.updateTexture(this.videoTexture, this.videoElement);
      gl.bindBuffer(gl.ARRAY_BUFFER, this.videoRectBuffer);
      gl.activeTexture(gl.TEXTURE0);
      gl.bindTexture(gl.TEXTURE_2D, this.videoTexture);
      gl.uniform1i(this.uTexture, 0);
      gl.vertexAttribPointer(this.aVertexCoord, 2, gl.FLOAT, false, 4 * 4, 0);
      gl.vertexAttribPointer(this.aTextureCoord, 2, gl.FLOAT, false, 4 * 4, 4 * 2);
      return gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
    };

    return FeatureVideoView;

  })();

  document.addEventListener('DOMContentLoaded', function() {
    var nextFrame, video, view;
    video = document.getElementById('video');
    view = new FeatureVideoView(video);
    document.body.appendChild(view.element);
    nextFrame = function() {
      view.render();
      return requestAnimationFrame(nextFrame);
    };
    video.play();
    return nextFrame();
  });

}).call(this);

//# sourceMappingURL=index.js.map
